// Generated by Dagger (https://dagger.dev).
package com.moviediscovery.app.presentation.viewmodel;

import com.moviediscovery.app.domain.usecase.AddBookmarkUseCase;
import com.moviediscovery.app.domain.usecase.IsMovieBookmarkedUseCase;
import com.moviediscovery.app.domain.usecase.RemoveBookmarkUseCase;
import com.moviediscovery.app.domain.usecase.SearchMoviesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SearchViewModel_Factory implements Factory<SearchViewModel> {
  private final Provider<SearchMoviesUseCase> searchMoviesUseCaseProvider;

  private final Provider<AddBookmarkUseCase> addBookmarkUseCaseProvider;

  private final Provider<RemoveBookmarkUseCase> removeBookmarkUseCaseProvider;

  private final Provider<IsMovieBookmarkedUseCase> isMovieBookmarkedUseCaseProvider;

  public SearchViewModel_Factory(Provider<SearchMoviesUseCase> searchMoviesUseCaseProvider,
      Provider<AddBookmarkUseCase> addBookmarkUseCaseProvider,
      Provider<RemoveBookmarkUseCase> removeBookmarkUseCaseProvider,
      Provider<IsMovieBookmarkedUseCase> isMovieBookmarkedUseCaseProvider) {
    this.searchMoviesUseCaseProvider = searchMoviesUseCaseProvider;
    this.addBookmarkUseCaseProvider = addBookmarkUseCaseProvider;
    this.removeBookmarkUseCaseProvider = removeBookmarkUseCaseProvider;
    this.isMovieBookmarkedUseCaseProvider = isMovieBookmarkedUseCaseProvider;
  }

  @Override
  public SearchViewModel get() {
    return newInstance(searchMoviesUseCaseProvider.get(), addBookmarkUseCaseProvider.get(), removeBookmarkUseCaseProvider.get(), isMovieBookmarkedUseCaseProvider.get());
  }

  public static SearchViewModel_Factory create(
      Provider<SearchMoviesUseCase> searchMoviesUseCaseProvider,
      Provider<AddBookmarkUseCase> addBookmarkUseCaseProvider,
      Provider<RemoveBookmarkUseCase> removeBookmarkUseCaseProvider,
      Provider<IsMovieBookmarkedUseCase> isMovieBookmarkedUseCaseProvider) {
    return new SearchViewModel_Factory(searchMoviesUseCaseProvider, addBookmarkUseCaseProvider, removeBookmarkUseCaseProvider, isMovieBookmarkedUseCaseProvider);
  }

  public static SearchViewModel newInstance(SearchMoviesUseCase searchMoviesUseCase,
      AddBookmarkUseCase addBookmarkUseCase, RemoveBookmarkUseCase removeBookmarkUseCase,
      IsMovieBookmarkedUseCase isMovieBookmarkedUseCase) {
    return new SearchViewModel(searchMoviesUseCase, addBookmarkUseCase, removeBookmarkUseCase, isMovieBookmarkedUseCase);
  }
}
