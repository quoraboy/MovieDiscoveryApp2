// Generated by Dagger (https://dagger.dev).
package com.moviediscovery.app.presentation.viewmodel;

import com.moviediscovery.app.domain.usecase.AddBookmarkUseCase;
import com.moviediscovery.app.domain.usecase.GetNowPlayingMoviesUseCase;
import com.moviediscovery.app.domain.usecase.GetTrendingMoviesUseCase;
import com.moviediscovery.app.domain.usecase.IsMovieBookmarkedUseCase;
import com.moviediscovery.app.domain.usecase.RemoveBookmarkUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class HomeViewModel_Factory implements Factory<HomeViewModel> {
  private final Provider<GetTrendingMoviesUseCase> getTrendingMoviesUseCaseProvider;

  private final Provider<GetNowPlayingMoviesUseCase> getNowPlayingMoviesUseCaseProvider;

  private final Provider<AddBookmarkUseCase> addBookmarkUseCaseProvider;

  private final Provider<RemoveBookmarkUseCase> removeBookmarkUseCaseProvider;

  private final Provider<IsMovieBookmarkedUseCase> isMovieBookmarkedUseCaseProvider;

  public HomeViewModel_Factory(Provider<GetTrendingMoviesUseCase> getTrendingMoviesUseCaseProvider,
      Provider<GetNowPlayingMoviesUseCase> getNowPlayingMoviesUseCaseProvider,
      Provider<AddBookmarkUseCase> addBookmarkUseCaseProvider,
      Provider<RemoveBookmarkUseCase> removeBookmarkUseCaseProvider,
      Provider<IsMovieBookmarkedUseCase> isMovieBookmarkedUseCaseProvider) {
    this.getTrendingMoviesUseCaseProvider = getTrendingMoviesUseCaseProvider;
    this.getNowPlayingMoviesUseCaseProvider = getNowPlayingMoviesUseCaseProvider;
    this.addBookmarkUseCaseProvider = addBookmarkUseCaseProvider;
    this.removeBookmarkUseCaseProvider = removeBookmarkUseCaseProvider;
    this.isMovieBookmarkedUseCaseProvider = isMovieBookmarkedUseCaseProvider;
  }

  @Override
  public HomeViewModel get() {
    return newInstance(getTrendingMoviesUseCaseProvider.get(), getNowPlayingMoviesUseCaseProvider.get(), addBookmarkUseCaseProvider.get(), removeBookmarkUseCaseProvider.get(), isMovieBookmarkedUseCaseProvider.get());
  }

  public static HomeViewModel_Factory create(
      Provider<GetTrendingMoviesUseCase> getTrendingMoviesUseCaseProvider,
      Provider<GetNowPlayingMoviesUseCase> getNowPlayingMoviesUseCaseProvider,
      Provider<AddBookmarkUseCase> addBookmarkUseCaseProvider,
      Provider<RemoveBookmarkUseCase> removeBookmarkUseCaseProvider,
      Provider<IsMovieBookmarkedUseCase> isMovieBookmarkedUseCaseProvider) {
    return new HomeViewModel_Factory(getTrendingMoviesUseCaseProvider, getNowPlayingMoviesUseCaseProvider, addBookmarkUseCaseProvider, removeBookmarkUseCaseProvider, isMovieBookmarkedUseCaseProvider);
  }

  public static HomeViewModel newInstance(GetTrendingMoviesUseCase getTrendingMoviesUseCase,
      GetNowPlayingMoviesUseCase getNowPlayingMoviesUseCase, AddBookmarkUseCase addBookmarkUseCase,
      RemoveBookmarkUseCase removeBookmarkUseCase,
      IsMovieBookmarkedUseCase isMovieBookmarkedUseCase) {
    return new HomeViewModel(getTrendingMoviesUseCase, getNowPlayingMoviesUseCase, addBookmarkUseCase, removeBookmarkUseCase, isMovieBookmarkedUseCase);
  }
}
