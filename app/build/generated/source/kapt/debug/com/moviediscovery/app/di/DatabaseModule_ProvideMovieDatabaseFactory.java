// Generated by Dagger (https://dagger.dev).
package com.moviediscovery.app.di;

import android.content.Context;
import com.moviediscovery.app.data.local.database.MovieDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DatabaseModule_ProvideMovieDatabaseFactory implements Factory<MovieDatabase> {
  private final Provider<Context> contextProvider;

  public DatabaseModule_ProvideMovieDatabaseFactory(Provider<Context> contextProvider) {
    this.contextProvider = contextProvider;
  }

  @Override
  public MovieDatabase get() {
    return provideMovieDatabase(contextProvider.get());
  }

  public static DatabaseModule_ProvideMovieDatabaseFactory create(
      Provider<Context> contextProvider) {
    return new DatabaseModule_ProvideMovieDatabaseFactory(contextProvider);
  }

  public static MovieDatabase provideMovieDatabase(Context context) {
    return Preconditions.checkNotNullFromProvides(DatabaseModule.INSTANCE.provideMovieDatabase(context));
  }
}
